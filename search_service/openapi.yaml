openapi: 3.0.0
info:
  version: 1.0.0
  title: SocialDice Users Service

paths:
  /login:
     post:
      summary: "checks user email and password to authenticate"
      description: ""
      operationId: "Check user"

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                    type: string
                password:
                    type: string
              required:
                - email
                - password
      responses:
        '200':
          description: A JSON string with a response message
          content:
            application/json:
              schema:
                type: object
                properties: 
                  response:
                    type: boolean
                    description: >
                      Messages:
                       * `'True'` - User is authenticated
                       * `'False'` - User is not authenticated
                  user_id:
                    type: integer 
     
                    
  /singup:
    post:
      summary: "checks user data and create an user on database"
      description: ""
      operationId: "Sing up user"
      
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                email:
                  type: string
                dateofbirth:
                  type: string
                password:
                  type: string
              required:
                - firstname
                - lastname
                - email
                - dateofbirth
                - password
                  
      responses:
        '200':
          description: A JSON string with a response message
          content:
            applicaion/json:
              schema:
                type: object
                properties:
                  response: 
                    type: boolean
                    description: >
                      Messages:
                       * `'True'` - User was created
                       * `'False'` - User was not created
                  user_id:
                     type: integer  
                     description: >
                      Messages:
                        * `-1` - User email is used already or error.
                        * `< 0 ` - Registered user and return id of user.
                        
  /user/<user_id>:
    get:
        summary: "get user information by id"
        description: ""
        operationId: " Get user "
          
        responses:
          '200':
            description: A JSON string with a response message
            content:
              application/json:
                schema:
                  type: object
                  properties: 
                    firstname:
                      type: string
                    lastname:
                      type: string
                    email:
                      type: string
                    dateofbirth:
                      type: string
                    user_id:
                      type: integer 
  /delete/<user_id>:
    delete:
      summary: "delete user by id"
      description: ""

      responses:
        '200':
            description: A JSON string with a response message
            content:
                application/json:
                  schema:
                    type: object
                    properties:
                      response:
                        type: boolean
                        description: >
                          Messages:
                           * `'True'` - User was deleted
                           * `'False'` - User was not deleted

  /follow/<follower_id>/<followed_id>:
    get:
      summary: add the follow from follower_id to followed_id
      responses:
        '200':
          description: return a JSON with a message and an integer, that if it is positive it will be intended as the new number of followeds after the operation, else is the error code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >
                      Messages:
                       * `'You already follow this user'` - userid already followed
                       * `'You can't self-follow'` - self follow error
                       * `'The user does not exist'` - userid does not exist
                       * `'DB error during add_follow'` - DB error
                       * `'OK'` - follow added correctly
                       
                  followed:
                    type: integer
                    description: >
                      types:
                        * `-1` - userid already followed
                        * `-2` - self follow error
                        * `-3` - userid does not exist
                        * `-4` - DB error
                        * `n` - follow added correctly, n=actual number of followeds users

    delete:
      summary: unfollow userid
      responses:
        '200':
          description: return a JSON with a message and an integer, that if it is positive it will be intended as the new number of followeds after the operation, else is the error code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >
                      Messages:
                       * `'You already follow this user'` - userid already followed
                       * `'You can\'t self-follow'` - self follow error
                       * `'The user does not exist'` - userid does not exist
                       * `'DB error during add_follow'` - DB error
                       * `'OK'` - follow added correctly
                       
                  followed:
                    type: integer
                    description: >
                      types:
                        * `-1` - userid already followed
                        * `-2` - self follow error
                        * `-3` - userid does not exist
                        * `-4` - DB error
                        * `n` - follow added correctly, n=actual number of followeds users
                    
  /unfollow/<follower_id>/<followed_id>:
    post:
      summary: add the follow from follower_id to followed_id
      responses:
        '200':
          description: return a JSON with a message and an integer, that if it is positive it will be intended as the new number of followeds after the operation, else is the error code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: >
                      Messages:
                       * `'You already follow this user'` - userid already followed
                       * `'You can\'t self-follow'` - self follow error
                       * `'The user does not exist'` - userid does not exist
                       * `'DB error during add_follow'` - DB error
                       * `'OK'` - follow added correctly
                       
                  followed:
                    type: integer
                    description: >
                      types:
                        * `-1` - userid already followed
                        * `-2` - self follow error
                        * `-3` - userid does not exist
                        * `-4` - DB error
                        * `n` - follow added correctly, n=actual number of followeds users
    
  /is_follower/<user_a>/<user_b>:
    get:
      summary: check if user_a follow user_b
      responses:
        '200':
          description: return a json with a boolean, which is True if user_a follow user_b, or False otherwise
          content:
            application/json:
              schema:
                type: object
                properties:
                  follow:
                    type: boolean
                    description: >
                      types:
                        * `True` - If user_a follow user_b
                        * `False` - otherwise

  /followed/list/<subject>:
    get:
      summary: Return the list of the users followed by subject
      responses:
        '200':
          description: return all the users followed by the subject as a JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  followed:
                    type: array
                    items:
                      type: integer
                description: List of user_id
                      
